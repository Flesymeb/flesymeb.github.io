[{"content":" ","date":"2024-12-21","externalUrl":null,"permalink":"/","section":".","summary":"\u003c!-- \u003cdiv class=\"flex px-4 py-2 mb-8 text-base rounded-md bg-primary-100 dark:bg-primary-900\"\u003e\n  \u003cspan class=\"flex items-center ltr:pr-3 rtl:pl-3 text-primary-400\"\u003e\n    \n    \n      \u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\n        \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n    \n      \u003c/span\u003e\n    \n\n  \u003c/span\u003e\n  \u003cspan class=\"flex items-center justify-between grow dark:text-neutral-300\"\u003e\n    \u003cspan class=\"prose dark:prose-invert\"\u003e 这是 \u003ccode id=\"layout\"\u003ebackground\u003c/code\u003e 的样式示例。\u003c/span\u003e\n    \u003cbutton\n      id=\"switch-layout-button\"\n      class=\"px-4 !text-neutral !no-underline rounded-md bg-primary-600 hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n    \u003e\n      切换 layout \u0026orarr;\n    \u003c/button\u003e\n  \u003c/span\u003e\n\u003c/div\u003e --\u003e\n\u003c!-- ```node\nnpx blowfish-tools\n``` --\u003e\n\u003c!-- \u003clite-youtube videoid=\"SgXhGb-7QbU\" playlabel=\"SgXhGb-7QbU\" params=\"\"\u003e\u003c/lite-youtube\u003e\n --\u003e","title":".","type":"page"},{"content":" 2024 软件工程复习 # Tongji University. 2024/12/21 Hyoung Yan\n本文框架 # Chapter 1: 软件工程概述 # 背景知识 # 软件是计算机系统中与硬件相互依存的另一部分，它是包括程序、数据及其相关文档组成的完整集合。 软件是一种逻辑实体，具有抽象性。软件具有 复杂度、一致性、可变性和无不可见性 等固有的内在特性，这是造成软件开发困难的根本原因。\n软件 = 程序+数据+文档 程序：程序是按照事先设计好的功能和性能要求执行的指令序列 数据：数据是指程序等正常处理信息的数据和数据结构 文档：文档是与软件开发、设计、运行、维护有关的图文资料 软件分类 可按照用途分类，也可根据软件的规模、软件的工作方式、使用频度、失效后的影响等进行分类。\n系统软件：系统软件是为其他软件服务的软件 实时软件：管理、分析、控制现实世界所发生的事件的软件 商业管理软件：商业信息处理是最大的软件应用领域，各类管理信息系统(MIS)、企业资源计划(ERP)、客户关系管理(CRM)等都是典型的商业管理软件 工程与科学计算软件：此类软件的特征是要实现特定的“数值分析”算法 嵌入式软件：嵌入式软件是指嵌入在各种电子设备中的软件，完成很有限、很专业的功能的软件 人工智能软件：利用非数值算法去解决复杂问题的软件。各类专家系统、模式识别软件、人工神经网络软件都属于人工智能软件。 个人计算机软件：文字处理系统、电子表格、游戏娱乐软件等 软件危机：是指在计算机软件的开发和维护过程中所遇到的一系列严重问题\n其一，如何开发软件，以满足不断增长、日趋复杂的需求 其二，如何维护数量不断膨胀的软件产品 软件开发问题的解决途径 1968 年北大西洋公约组织（NATO）召开国际会议，提出“软件工程”概念和术语。 软件工程概述 # 系统的特征\n系统是相互联系的一组元素的集合 系统是具有特点功能的有机整体 系统是有边界的 系统需要和其他系统交互 一个系统可能包含另一个系统 系统是逐渐演变形成的 工程的概念 工程的方法： 工程是将理论与所学的知识应用于实践的科学，以便经济有效地解决实际问题。\n工程的特征：\n注重系统的构建过程 平衡与决策 度量与验证 训练有素的过程 团队协作与角色分工 系统地运用工具 工程原则、标准和实践 重用设计和设计制品 什么是软件工程？ 软件工程是：\n将系统性的、规范化的、可定量的方法应用于软件的开发、运行和维护，即工程化应用到软件上 对 1 中所述方法的研究 软件工程的基本目标\n较低的开发成本 按时完成开发任务并及时交付 实现客户要求的功能 所开发软件具有良好的性能 较高的可靠性、可扩展性、可移植性 软件维护费用低 软件质量属性\n什么是好的软件？ 功能质量、结构质量、过程质量 McCall 质量模型 ISO9126 质量模型 软件过程模型 # 软件开发活动\n问题定义：人们通过开展技术探索和市场调查等活动，研究系统的可行性和可能解决方案，确定待开发系统的总体目标和范围 需求开发：在可行性研究之后，分析、整理和提炼所收集到的客户需求，建立完整的需求分析模型，编写软件需求规格说明 软件设计：根据需求规格说明，确定软件体系结构，进一步设计每个系统部件的实现算法、数据结构及其接口等 软件实现：概括说是将软件设计转换为程序代码，是一个复杂且迭代的过程，要求根据设计模型进行程序设计以及正确高效地编写和测试代码 软件测试：检查和验证所开发的系统是否符合用户期望，包括单元测试、子系统测试、集成测试和验收测试等 软件演化：系统投入使用后对其进行改进，以适应不断变化的需求，将系统的开发和维护看作一个连续的过程更有意义。 瀑布模型：瀑布模型的开发阶段严格按照线性方式进行，每一个阶段具有相关的里程碑和交付产品，且需要确认和验收。\n需求定义与分析 软件设计 软件实现 软件测试 软件运行与维护 讨论： 瀑布模型是否反映了实际的软件开发过程？软件开发作为一个问题求解过程，应当具备什么特点？\n瀑布模型源于硬件领域，它从制造业的角度来审视软件开发。制造业是通过批量生产某一特定产品来实现的，而软件开发则不同。随着人们对问题的深入理解以及对可选方案的不断评估，软件在开发过程中不断演化。因此，软件开发更像是一个创造性的过程，而非单纯的生产过程。\n软件开发具有 迭代性，需要不断地反复尝试，通过比较和选择不同的设计，最终确定令人满意的问题解决方案\n原型化模型：原型化模型需要 迅速建造 一个可运行的软件原型，它使用户和开发人员对系统的相关方面进行检查，以决定是否合适和恰当 需求原型化\n纸上原型 产品原型设计软件 阶段化开发：今天的商业环境需要快速地推出新产品，阶段化开发使得软件系统能够一部分一部分地交付，从而缩短软件开发周期。 增量模型：在每一个新的发布中逐步增加功能直到构造全部功能 迭代模型：一开始提交一个完整系统，在后续发布中补充完善各子系统功能 可转换模型：可转换模型师采用 形式化的数学方法 描述系统，并利用一系列转换将形式化的需求规格说明变为可交付使用的系统 数学方法具有严密性和准确性，形式化方法所交付的系统具有较少的缺陷和较高的安全性 网络公开课程：适用于增量模型或迭代模型 汽车防抱死系统：适用于可转换模型（形式化方法）\nChapter 2: 需求获取技术 # 软件需求 # 软件需求：是指利益相关方队目标软件系统的要求和期望，细分为：\n功能需求：描述系统应该具有的功能（控制 ⽉ 球 ⻋ 移动并到达指定地点） 性能需求：描述系统应该具有的性能（MCS 必须在 1 秒内完成最优路径规划） 可靠性需求：描述系统应该具有的可靠性（MCS 平均 ⽆ 故障 ⼯ 作时间必须 ⼤ 于 24 ⼩ 时） 约束性需求：描述系统应该满足的约束条件（MCS 必须在 10 个 ⽉ 内通过验收测试） 软件需求是整个软件项目的终极目标，也是后续软件开发活动的主要基础\n需求工程活动\n需求抽取（Elitication）：通过与用户交流，了解用户需求 需求分析（Analysis）：对需求进行分析，确定需求的优先级 需求规约（Specification）：将需求规约为文档 需求管理（Management）：管理需求变更 需求验证（Validation）：验证需求是否满足用户需求 需求抽取 # 需求抽取的目标、实质和关键\n需求抽取的目标 是主动与干系人协同工作，找出他们的需求，设别潜在的冲突，磋商解决矛盾，定义系统范围与边界 需求抽取的实质 是了解待解决问题及其所属领域； 需求抽取的关键 是确保问题的解决是有 商业价值 的 需求抽取技术\n抽取技术：协同工作、面谈、问卷调查、观察法、原型法、文档分析、建模、角色扮演、非功能性需求列表 冲突是被与磋商 需求抽取的出发点\n确定干系人：需要强调与客户的联络关系，系统的设计与谁的利益息息相关 定义边界：界定问题的范围，确定系统的边界 定义目标和情景实例：目标和情景实例是组织原始需求信息的有效手段 分析可行性：如何进行可行性研究，如何选择好的项目 分析风险：风险管理应长期、持续进行，而非阶段性、一次性的任务；进行灾难和事故分析以确定风险 Stakeholders：干系人是指与软件系统有关的所有人员，包括用户、开发人员、管理人员、维护人员、软件工程师等。让利益相关者参与个人或团体需求会议以定义系统详细信息 访谈技巧，启发式问题：\n访谈：同一时间，同一地点。Few People, Analyst-Driven 调查文卷：不同时间，不同地点。Many People, Analyst-Observer 小组讨论：相同时间，相同或不同地点，\u0026lt; 20 人，Analyst-Facilitated 观察：同一时间，同一地点，Analyst-Observer 原型、模型、大纲：澄清模糊或不确定的需求；简化需求文档和接受需求，向客户和最终用户提供早期反馈（A picture says a thousand words.） Prepare for Change\nThis is an “attitude” The more stakeholders are involved, the more features they will want • Don’t solve this “problem” by eliminating stakeholders Stakeholders have the right to change their minds • Don’t Ever Ask: “Ok, Is that Your Final Requirement?” See suggested changes as opportunities, not threats 需求分析 # 需求分析的目标、实质和关键\n目标：对产品及其环境的交互进行更深入的了解，识别系统需求，设计软件体系结构，建立需求与体系结构部件之间的关联，在体系结构设计实现过程中进一步识别矛盾冲突，并通过干系人之间的协调磋商解决问题 实质：概念建模，选择常用的建模语言，进行功能建模和信息建模 关键：体系结构设计与需求分配 通过评估需求的满足度来评价体系结构设计的质量 需求规约 # 需求规约是系统和软件需求的文档化，以便于后续的需求及系统正式评审而准备的规范化文档\n单个需求项的质量：准确、正确、明确、可行、可证 整个需求集合的质量：现实、精确、全面、一致 需求管理 # 需求管理是贯穿从需求获取到软件系统下线的全过程。需求管理设计软件配置管理、需求跟踪、影响分析和版本控制。\n需求跟踪：描述和追踪一条需求的来龙去脉的能力，包括向前追踪到软件制品，向后追踪到需求来源。 变更请求管理：系统化的变更管理 需求属性管理 需求验证 # 对其他需求工程活动的质量的保证。通过数学的形式化工具或工程化的测试过程来确保系统满足干系人的要求。 验证方法：评审、原型化、模型验证、确认测试\n需求种类\n用户需求，客户需求，业务需求\n软件需求，系统需求\n功能需求：As an actor(object), do what, so that (goal) 非功能需求 质量需求：安全性、可靠性、稳定性、可用性、可维护性、可移植性、可扩展性、兼容性 约束需求：预算、时间、技术等 需求获取的内容 # 功能需求：系统做什么，系统何时做什么，系统何时及如何修改或升级 性能需求：软件开发的技术性指标，规模大小、存储容量、可靠性、安全性 环境需求：硬件设备、软件设备 界面需求：来自其他系统的输入、输出到其他系统、数据格式、数据存储介质 接口需求：软件与其他软件或硬件的接口 用户或人的因素：用户需求、用户熟练程度、需何种培训 文档需求：用户手册、技术手册、培训手册 数据需求：数据的输入、输出、存储、数据流量 资源需求：人员、时间、预算、硬件、软件 安全需求 软件成本消耗与开发进度 质量保证 数据流图 DFD # 软件需求分析建模方法：\n结构化分析（传统建模方法）：数据流图、数据字典、实体关系图 面向对象分析：对象模型、功能模型、动态模型 数据流图（DFD，Data Flow Diagram）是一种描述系统功能的图形化工具，图中没有任何具体的物理元素，只是描绘信息在系统中的流动和处理情况。就图本身而言，并不是只有程序员，或计算机专业技术人员能够读懂，特别是需求方（客户，用户）也能读懂。 DFD 的基本元素 External Entity：外部实体，系统的输入输出来源，Source/Sink Processing：处理，对数据进行处理的过程，至少有一个输入和一个输出 Data Flow：数据流，数据在处理过程中的流动 Data Stores：数据存储，数据的存储位置 Describing letter：描述符号，用于描述数据流的内容 DFD 的基本规则\n流程的输入始终和输出不同 对象始终有唯一的命名 处理至少有一个输入和一个输出 数据无法直接从一个存储移至另一个存储 数据无法直接从外部源移动到数据存储 数据无法直接从数据存储移动到数据接收器 数据存储具有名词短语标签 数据无法直接从源移动到接收点 数据流在符号之间只有一个流动方向 数据流到数据存储意味着更新 来自数据存储的数据流意味着检索或使用 分叉意味着完全相同的数据从公共位置传输到两个或多个进程、数据存储或源/接收器 连接意味着完全相同的数据来自任何两个或更多不同的流程、数据存储或源/接收器到公共位置 DFD 分层 DFD 可以分为多个层次，每个层次都有不同的细节级别。最高层次的 DFD 称为 0 级 DFD，它是系统的总体概述。0 级 DFD 描述了系统的整体功能，而 1 级 DFD 描述了 0 级 DFD 中的每个功能的详细信息。1 级 DFD 可以进一步分解为 2 级、3 级 DFD 等。\nDFD 缺点：无法给出精确详细的定义，不能使用 DFDs 模拟系统\n数据字典 DD # 数据字典 DD 是对所有与系统相关的数据元素的一个有组织的列表, 以及精确的、严格的定义，使得用户和系统分析员对于输入、输出、存储成分和中间计算结果等有共同的理解。\n定义式中使用的符号\n操作符 含义描述 举例 = 被定义为 x = “a” + 与（顺序结构） x = a + b {\u0026hellip;} 重复（循环结构） x = {a}，x = 3{a}8 [\u0026hellip;|\u0026hellip;] 或（选择结构） x = [a, b]，x = [a|b] [\u0026hellip;,\u0026hellip;] 或（选择结构） x = [a, b] (\u0026hellip;) 可选 x = (a) “\u0026hellip;” 基本数据元素 x = “a” .. 连结符 x = 1..9 *\u0026hellip;* 注释符 这是注释内容 m..n 界域 x = 3..8 x = {a}: a 重复 0 次或多次\nx = 3{a}8: a 重复 3 次到 8 次\n实体关系图 E-R # 实体关系图 E-R 是一种用于描述系统中数据的结构化方法，它描述了系统中的实体、实体之间的关系和实体的属性。可用于描述数据流图中“数据存贮”及其之间的关系，它是数据库概念设计的最常用的工具。\nERD 的符号：\n实体用长方形表示\n实体的属性用椭圆形表示\n联系用菱形框表示\n用无向边把实体与其属性连接起来\nChapter 3: UML 与用例建模 # 面向对象分析模型：\n用例图 Use Case Diagram 类图和对象图 Class Diagram and Object Diagram 行为图 Behavior Diagram 面向对象：封装、继承、复用、对象 对象-类 类是描述和抽象; 对象是具体和实例化（instance） 类是对象定义，描述，设计时的称呼。 对象是类使用，调用，实例化时的称呼。类对应的程序运行使用的称呼 软件开发中为什么要使用面向对象方法？ 自然，接近现实 方便建模 模块化 封装与信息隐藏 继承复用 扩展修改维护容易 面向对象分析方法与结构化分析方法有哪些相似之处？有何区别？ 面向结构的方法是过程的集合，面向对象的方法是实体的集合 传统方法数据与过程分离，对象方法数据和处理数据的方法封装成一个单元 SOA 方法面向功能，OOP 方法面向对象，并确定实体间的关系，但两种方法并不排斥 面向对象方法是对过去的一个完全突破，还是“换汤不换药”？\n面向对象方法并不是对过去的完全突破，而是对传统方法的改进和扩展。它继承了传统方法中的许多优点，同时引入了新的概念和技术，如封装、继承和多态性，使得软件开发更加自然和接近现实世界。面向对象方法强调对象和类的概念，将数据和操作封装在一起，提高了系统的模块化和可维护性。因此，面向对象方法可以看作是对传统方法的优化和发展，而不是完全的颠覆。\nOOA 建立分析模型的 5 个基本原则 建立分析模型 5 个基本原则：\n建模信息域； 描述模块功能； 表示模型行为； 分解以模型显示更多细节； 早期模型表示问题的本质，而后期模型提供实现细节。 UML 基础 # UML 是统一建模语言（Unified Modeling Language）的缩写，是一种用于软件系统分析和设计的标准化建模语言。可视化、详述、构造、文档化 UML 语法（图的画法） 4 个重要的 UML 图 # 用例图 Use Case Diagram 用例图是从用户角度描述系统功能，是用户所能观察到的系统功能的模型图，用例是系统中的一个功能单元。 用例图列出系统重的用例和系统外的参与者，并显示哪个参与者参与了哪个用例的执行（或称为发起了哪个用例）。\n参与者 Actor：在系统外部与系统直接交互的人或事物 用例 Use Case：系统外部可见的一个系统功能单元。系统的功能由系统单元所提供，并通过一系列系统单元与一个或多个参与者之间交换的消息所表达。 用例图中的关系（边）及解释 泛化：箭头指向的为一般化 包含：箭头指向的为包含，必须执行 扩展：箭头指向的为扩展，可选执行 类图 Class Diagram 类图以反映类的组成（属性、操作），以及类之间的关系为主要目的，描述了软件系统的静态结构，是一种静态建模方法。类图包括类的内部结构和类之间的联系（关联、依赖、聚合等）。类是对现实世界中的事物（对象）的抽象。\n类图中的术语及解释\n类名：斜体为抽象类\n属性：属性名：属性类型, + 表示 public，- 表示 private，# 表示 protected，缺省值\n操作：操作名(参数列表:参数类型)：返回类型，+ 表示 public，- 表示 private，# 表示 protected，斜体为抽象操作\n接口：一组操作的集合，只有操作的声明，没有操作的实现 抽象类：不能实例化，只能作为其他类的父类，一般至少包含一个抽象操作 模版类：一种参数化的类，在编译时把模版参数绑定到不同的数据类型，从而产生不同的类 类图中的关系及解释\n关联关系：描述了类的结构之间的关系，具有方向、名字、角色和多重性等信息 一般关联：1...* 表示 1 至多个，0...1 表示 0 至 1 个；双向关联省略箭头 聚合关系：Aggregation，指明一个聚集（整体）和组成部分之间的关系。类图包含有实物和关系，类图不存在了，实物和关系还可用于其它的类图。 组合关系：Composition，语义更强的聚合，部分和整体具有相同的生命周期。类与关联关系之间有了组合关系，类不存在了，则相应的关联关系也不存在了。 泛化关系：在面向对象中一般称为 继承关系，存在与父类与子类、付接口与子接口之间 实现关系：对应于类和接口之间的关系，类 Circle、Rectangle 实现了接口 Shape 依赖关系：描述了一个类的变化对依赖它的类产生影响的情况。例如绑定（bind）、友元（friend）等 类图与代码的映射 类的映射、关联关系的映射、泛化关系的映射（class SavingsAccount:public Accout）、实现关系的映射（class Circle : public Shape, virtual void Draw();）、依赖关系的映射（模版类）\n顺序图 Sequence Diagram 顺序图用来表示 用例中的行为顺序，当执行一个用例行为时，顺序图中的每条消息对应了一个类操作或状态机中引起转换的事件。顺序图展示对象之间的交互，属于 动态建模。顺序图的重点在 消息序列 上。 浏览顺序图的方法是 从上到下 查看对象间交换的消息。 顺序图中的术语及解释\n消息格式：operation(parameter list)，向哪个对象发送消息，实际上就是调用它的类中的操作 窄长方框用以强调这个部分处于活动状态 对象生命线表示从上到下的时间顺序，消息 1 在消息 2 之前发生，消息 2 在消息 3 之前发生 购票用例的顺序图： 状态图 Statechart Diagram 状态图说明对象在它的生命期中响应事件所经历的状态序列，以及它们对那些事件的响应，状态图用于揭示 Actor、类、子系统和组件的复杂特性，为 实时系统建模。\n状态图的组成\n状态，对象的状态是指在这个对象的 生命期中的一个条件或状况，在此期间对象将满足某些条件、执行某些活动，或等待某些事件。 转移，是 由一种状态到另一种状态的迁移。这种转移由被建模实体内部或外部事件触发。对一个类来说，转移通常是调用了一个可以引起状态发生重要变化的操作的结果。 状态图中的术语及解释 状态的可选活动表 Chapter 4 软件需求分析 # UML 分析模型 # UML 分析模型的三个视图\n功能模型：描述处理（数据变换），指明系统应该做什么 Use Case Diagram 对象模型：描述静态结构，定义做事情的实体 Class \u0026amp; Object Diagram 动态模型：描述交互过程，规定什么时候做何事 Sequence,State Diagram 面向对象分析的本质 3 个模型（功能、对象、动态），5 个层面（主题、类和对象、结构、属性、服务）\n典型用例建模方法（Use Case Diagram） 从和系统有交互的实体（外部用户）角度出发，描述系统应该具备哪些功能。\n系统边界：包围用例的方框，表示系统的范围，边界内的用例表示系统将来要实现的功能。 参与者：在系统边界之外，透过系统边界与系统进行有意义的交互的任何人或事物。 用例：由系统执行的一个动作序列，给 角色(actor) 提供一项有价值的服务。 关系：角色和用例、角色之间、用例之间有意义的 联系。 Use Case 图的建立步骤\n(1) 找出系统外部的参与者和外部系统，确定系统的边界和范围； (2) 确定每一个参与者所期望的系统行为； (3) 把这些系统行为命名为 Use Case； (4) 用泛化、包含、扩展等关系处理系统行为的公共或变更部分； (5) 编制和解释每一个 Use Case 的脚本； (6) 绘制 Use Case 图； [(7)] 区分主事件流和异常情况的事件流，可以把表示异常情况的事件流作为单独的 Use Case 处理； (8) 细化 Use Case 图，解决 Use Case 间的重复与冲突问题。 类建模方法（Class Diagram）\nThe key is finding objects\n如何提取类和对象？\n主题、类和对象、属性、服务、结构 主题是一种比类和对象抽象层次更高、粒度更大的概念，用以建立系统的高层抽象视图；中小型系统可只设一层主题，最多不超过两层；大型系统可只设两层主题，最多不超过三层。\n动态模型（Sequence, State Diagram)\n用来描述系统与时间相关的动态行为即系统的控制逻辑，表现对象彼此间经过相互作用后，随时间改变的不同运算顺序。 动态模型以“事件”（Events）和“状态”（States）为其模型的主要概念。\n需求规范（Requirements Specification） # 需求工程（Requirements Engineering）包括：Part 1：需求分析；Part 2：需求规范\nRequirements Specification 目的：\nTo provide a representation of the software for the customer’s review and approval Developed as a joint effort between the developer and the customer Serve as basis for review for both customer and developer Direct software design and development Culmination of requirements analysis Requirements Specification 质量：\n(1) unambiguous（明确的） (2) complete（完整的） (3) verifiable（可验证的） (4) consistent（一致的） (5) modifiable（可修改的） (6) traceable（可追踪的） Requirements Specification 的方法：\n可混合使用的模型：DFD、ERD、DD\u0026hellip;Use Case、Class Diagram、Sequence Diagram\u0026hellip; 使用但不限于面向结构，面向对象方法 IPO 图，在计算机领域 IPO 是指结构化设计中变换型结构的输入（Input）、加工（Processing）、输出（Output）。IPO 图是对每个模块进行详细设计的工具，它是输入加工输出(INPUT PROCESS OUTPUT)图的简称。 需求规格说明书\n# 1. 引言 - 1.1 系统的目的 - 1.2 系统范围 - 1.3 项目的目标与成功标准 - 1.4 定义、缩略语和缩写 - 1.5 参考文献 - 1.6 概述 # 2. 当前系统 # 3. 提议的系统 - 3.1 概述 - 3.2 功能需求 - 3.3 非功能需求 - 3.3.1 可用性 - 3.3.2 可靠性 - 3.3.3 性能 - 3.3.4 可维护性 - 3.3.5 实施 - 3.3.6 接口 - 3.3.7 包装 - 3.3.8 法律 - 3.4 系统模型 - 3.4.1 场景 - 3.4.2 用例模型 - 3.4.3 对象模型 - 3.4.4 动态模型 - 3.4.5 用户界面 # 4. 术语表 Chapter 5 总体设计 # 总体设计基础概念 # 软件需求 VS 软件设计\n软件需求解决的是“做什么”的问题，软件设计解决的是“怎么做”的问题 软件设计分为 总体设计 和 详细设计 软件需求：分析模型；软件设计：设计模型 总体设计 VS 详细设计\n总体设计：确定软件的结构以及各组成部分（子系统或模块）之间的相互关系 总体设计的任务：将复杂系统按功能 分成模块、确定每个模块的功能和模块之间的 调用关系、块间传递的信息、评价模块结构的质量。 详细设计：确定模块内部的算法和数据结构，产生描述各模块程序过程的详细文档 详细设计的任务：为每个模块进行详细的 算法设计，用某种图形、表格、语言等工具将每个模块吹了过程的详细算法描述出来；为模块内的 数据结构进行设计；对数据库进行物理设计（确定数据库的物理结构）； 什么是软件体系结构？\n软件体系结构定义了软件局部和总体计算部件的 构成。从整体看，软件体系结构是由结构- 和功能各异、相互作用的部件集合，按照层次构成的。 软件体系结构定义了组成部件之间的相互作用 关系。 软件体系结构定义了构成系统的合成原理、方法、原则 软件体系结构定义了构成系统应该遵守的 约束 的条件。 总体设计的任务：\n确定软件的组成 确定各组成部分的相互关系 确定软件的运行模式 确定软件的若干原则 软件设计方法： 结构化设计方法(SD) 面向对象的设计方法(OOD) 面向数据结构的设计方法(JSD 方法) 评估准则：经验启发式规则、模块化、抽象、信息隐蔽、信息局部化\n什么是好的软件体系结构：模块化（Modularization）、抽象（Abstraction）、信息隐蔽（Information Hiding）、注意点分散(Separation of Concerns)、耦合和内聚 (couple and cohesion)、策略和实现的分离 (separation of police and implementation)、接口和实现的分离 (separation of interface and implementation)、分而制之(Divide-and-conquer)、层次化 (hierarchy)\n总体结构的设计方法\n根据经验划分子系统结构：根据待解决的问题 特点 和用户需求\n结构模式或风格：Architectural Pattern or Style。单机、多机、网络、集中式、分布式、客户端/服务器（表示层、功能层、数据层）\n胖客户机和瘦客户机 三层 B/S 结构 分布式对象体系结构：对象之间不存在客户机和服务器的界限，接收服务者扮演客户机角色，提供服务者就是服务器；对象可能分布在网络的多个计算机上，通过中间件相互通信 由 DFD 图导出总体结构\nI-\u0026gt; P-\u0026gt; O 自顶向下，逐步细化\n最顶层的控制模块 Cm 协调下述从属的控制功能：\n（1）输入信息处理控制模块 Ci，协调对所有输入数据的接收； （2）变换中心控制模块 Ct，管理对内部形式的数据的所有操作； （3）输出信息控制模块 Co，协调输出信息的产生过程。 由类图导出总体结构\n总体设计的原则 # 模块化原理 # 模块化（Modularization）\nsuppose P1, P2 be two problems, function C(x) stands the complexity of problem x, function E(x) represents the cost of solving problem x, if C(P1) \u0026gt; C(P2) Then E(P1) \u0026gt; E(P2) Experiential rule: C(P1+P2) \u0026gt; C(P1) + C(P2) E(P1+P2) \u0026gt; E(P1) +E(P2)\n抽象（Abstraction）\nAbstractions allow you to understand the essence of a subsystem without having to know unnecessary details\n信息隐蔽（Information Hiding）\n模块中所包含的信息（包括数据和过程）不允许其它不需要这些信息的模块使用。 设计模块时，应使得一个模块内包含的信息（数据和过程）对于不需要这些信息的模块来说，是不能访问的。\n模块独立（Module Independence）\n耦合（Coupling）：对一个软件结构内不同模块间互连程度的度量。模块间的连接有 调用、返回、进入、跳出 等 无直接耦合：如果两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的，这就是非直接耦合。这种耦合的 模块独立性最强。 数据耦合：一模块调用另一模块时，被调用模块的输入、输出都是简单的数据(若干参数)。属于 松散耦合。 控制耦合：一模块向下属模块传递的信息 (开关量、标志等控制被调用模块决策的变量) 控制了被调用模块的内部逻辑。可以将被调用模块的判定上移到调用模块中进行，改控制耦合为数据耦合。 公共耦合（公共数据区耦合）：一组模块引用同一个公用数据区，全局变量 内容耦合：一个模块直接访问另一个模块的内部数据结构，或者直接调用另一个模块的内部子程序。最不好的耦合形式。 内聚（Cohesion）：标志一个模块内各个处理元素彼此结合的紧密程度，理想的内聚模块只做一件事情。\n功能内聚：模块内的所有元素都是为了完成一个功能而设计的，缺一不可，内聚性最强 过程内聚，顺序内聚 时间内聚（经典内聚）：模块完成的功能在同一时间内执行，这些功能只因时间因素关联在一起。 追求：\n高内聚、低耦合 低耦合：尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，坚决避免使用内容耦合。 高内聚：优先使用功能内聚，尽量满足过程内聚，少用逻辑内聚，坚决避免偶然内聚。 模块独立性度量 # 深度：表示软件结构中控制的层数，它能粗略表示软件的复杂程度。 宽度：表示软件结构同一层内的模块总数。宽度越大系统越复杂，对宽度影响最大因素是模块的扇出。宽度太大可增加深度来减少。 扇出数：是一个模块直接控制（调用）的模块数目（5-9）。扇出越大模块越复杂。 扇入数：是直接调用的上级模块数（3-5）。扇入太大会增加模块接口数，违背模块独立性原则。 上级模块 下级模块 模块的作用域应该在控制域之内：\n模块的作用域：是指受该模块判定影响的所有模块数。 模块的控制域：是受这个模块直接或间接控制调用的模块数。 模块的控制范围：本身及其 所有下级模块。 模块的作用范围： 即 直接调用 的模块 Chapter 6 详细设计 # 详细设计初认识 # Detailed design = data structure+ algorithm\n软件定义阶段定义了问题结构，叫作软件设计的 一级蓝图。可用系统流程图表示、或数据流图表示、或用结构化语言表示、或以形式化软件设计语言表示。 软件总体设计确定了软件结构，即确定模块的划分、模块间的接口。可称作软件设计 二级蓝图。用结构图、Jackson 结构图、Warnier 图来表示、或用 HIPO 图来表示。 软件详细设计（也称软件算法设计、软件过程设计、软件逻辑设计）确定每个软件模块的实现算法，可称软件设计的 三级蓝图。可用 程序流程图描述、或用伪码描述。 OOA \u0026amp; OOD 软件复用（Reuse） # 软件复用的层次：\n知识重用 方法和标准重用 软件成分重用：项目计划、成本估算、体系结构、需求模型和规格说明、设计方案、源代码、用户文档和技术文档、用户界面、数据 面向对象设计的重用机制\n传统上：内部函数 面向对象：内部类（类构件） 实例重用 继承重用 多态重用 详细设计的描述 # 程序流程图（Program Flow Chart）：顺序、选择、循环。优点：简单直观；缺点：全局结构、数据结构难表示 N-S 盒图：顺序、IF-THEN-ELSE 分支、CASE 分支、循环、调用。 特点：\n（1）功能域（即某一具体构造的功能范围）有明确的规定，并且很只观地从图形表示中看出来；\n（2）想随意分支或转移是不可能的；\n（3）局部数据和全程数据的作用域可以很容易确定；\n（4）容易表示出递归结构。\nDo while C1 if C2 if C3 Do S1; if C5 S3; else S2; endif S4; until C4 S5; endif endif enddo Chapter 7 编码或实现 # 编码阶段的两个重要决策\n选择编程语言 选择编码标准或风格 编程语言的分类\n机器语言 汇编语言 高级语言 C++编程阶段：编译、链接、执行 编码风格具体体现\n标识符（符号名、变量名）的风格 注释的风格 序言性注释：给出程序的整体说明 功能性注释：嵌在源程序体中，用以描述其后的语句或程序段是在做什么工作 数据说明的风格 语句结构的风格 输入 ／ 输出的风格 程序 layout 风格 程序复杂性的度量\n程序复杂性： 模块内程序代码的复杂程度，例如行数，if 条件判断的个数，loop 循环的圈数等。\n算法的时间复杂性（执行的步数）和空间复杂性（占用的存储空间）\n复杂性度量方法\n代码行度量法\nMcCabe 度量法：计算环路复杂性的方法：根据图论，在一个强连通的有向图 G 中，环的个数由以下公式给出： V(G)＝ m－n ＋ p， 其中，V(G) 是图 G 中环路个数，m 是图 G 中弧数，n 是图 G 中结点数，p 是图 G 中的强连通分量个数。\nHalstead 的软科学法：度量操作码，操作数；运算符，运算对象\n预测方法： n1 表示程序设计时不同运算符(包括保留字)的个数， n2 表示程序设计时不同运算对象的个数， H 表示“程序长度”，则有 H=n1×log2 n1+n2 × log2n2 H 是程序长度的预测值 Chapter 8 软件测试 # 测试在软件开发中非常重视 The biggest cost in software development\n软件测试是为了发现错误而运行一个软件的过程。\n软件测试基本概念 # 软件测试的定义或目标（狭义） 测试是为了发现程序中的错误而执行程序的过程 一个好的测试用例 是发现了至今未发现错误的用例 一次成功的测试 是发现了至今未发现错误的测试 程序测试能证明错误的存在, 但不能证明错误不存在。 测试的目的是发现程序中的错误，为了证明程序有错, 而不是证明程序无错。 软件测试的定义或目标（广义）：用于确保软件符合其规范并满足用户要求的过程 Verification vs. validation Validation: Are we building the right product?The software should do what the users really require Verification: Are we building the product right?The software should conform to its specification V \u0026amp; V must be applied at each stage in the software process. 软件测试的两个方法 # 静态测试 Static Test # 基本特征是在对软件进行 分析、检查和审阅，不实际运行 被测试的软件。 静态测试约可找出 30 ～ 70%的 逻辑设计 错误. 对需求规格说明书、软件设计说明书、源程序做检查和审阅，包括： 是否符合标准和规范 通过结构分析、流图分析、符号执行指出软件缺陷 动态测试 Dynamic Test # 通过运行被测程序来检验软件的动态行为和运行结果的正确性 动态测试的两个基本要素： 被测试程序 测试用例（测试数据） 动态黑盒测试（闭着眼睛测试软件） 黑盒测试，也叫功能测试，是指测试人员不需要了解程序的内部实现，只关注系统的输入与输出，测试系统是否按照需求文档的要求正确执行。\n不深入代码细节 的测试方法称为动态黑盒测试。 软件测试员充当 客户 来使用它。 黑盒测试样例的设计方法：\n等价类划分法：将输入数据划分为若干个等价类，从每个等价类中选取一个数据作为测试数据。Equivalence analysis is the most widely used approach. 有效等价类：用于实现功能和性能的测试 无效等价类：用于测试那些所实现的功能和性能不符合规格说明书的要求 边界测试：更多错误往往会发生在输入域的边界。 边界值分析不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。 边界值分析不仅考虑输入条件，还要考虑输出空间产生的测试情况 测试边界上的合法数据, 以及刚超过边界的非法数据 错误推测法：根据经验、直觉和预感进行测试。缺省值、空白、空值、零、无输入条件 因果图法：相互组合，适合 有多个输入条件的组合，根据输入和输出之间的因果关系，构造因果图，从而设计测试用例 自动软件测试：人工测试耗时、需要回归测试，自动测试可以提高效率、减少人力成本 动态白盒测试（带 X 光眼镜测试软件） 白盒测试，也叫结构测试或透明盒测试，是指测试人员对被测试软件的内部结构、算法、代码逻辑等有充分的了解，基于程序的内部工作原理来 设计和执行测试用例。 白盒测试的样例设计规则：\n语句覆盖：每个语句至少执行一次 判定覆盖：每个判定的每个分支至少执行一次 条件覆盖：每个判定的每个条件的每个取值至少执行一次 判定/条件覆盖：每个判定的每个条件的每个取值至少执行一次，且每个判定的每个分支至少执行一次 条件组合覆盖：每个判定的每个条件的每个取值至少执行一次，且每个判定的每个条件的每个组合至少执行一次 路径覆盖：每个程序路径至少执行一次 点覆盖：每个判定的每个条件的每个取值至少执行一次，且每个判定的每个条件的每个组合至少执行一次，且每个程序路径至少执行一次，It is equal to statement coverage 边覆盖：每个程序的每条边至少执行一次，It is equal to branch coverage 软件测试的过程 # 软件测试的过程，即软件集成、形成过程：\n单元测试：集中对用 源代码 实现的, 每一个程序单元进行测试，检查各个程序模块是否正确地实现了规定的功能。\n集成测试：把已测试过的模块组装起来，主要对与设计相关的软件 体系结构 的构造进行测试。 模块组装集成方式\n一次性组装方式：整体拼装，一次性测试 增殖式组装方式：逐步组装成较大的系统，边组装边测试 增殖式组装方式\n自顶向下的增殖方式 自底向上的增殖方式：从程序模块结构的最底层的模块开始组装和测试。 混合增殖式测试：首先对 I/O 模块和关键算法模块进行测试，再自底向上组装成完整且独立的子系统，再由主模块开始自顶向下进行增殖测试 确认测试：检查已实现的软件是否满足了 需求规格说明 中确定了的各种需求，以及软件配置是否完全、正确。\n有效性测试（黑盒测试） 软件配置复查 Alpha 测试，Beta 测试 α 测试是由一个开发者在 开发环境下 进行的测试，也可以是 公司内部的用户 在模拟实际操作环境下进行的测试。 β 测试是由软件的多个用户，在 实际使用环境下 进行的测试。这些用户 返回有关错误信息给开发者。 验收测试 系统测试：把经过确认的软件纳入 实际运行 环境中，与其它系统成份组合在一起进行测试。 功能测试、非功能测试 其他测试：性能、恢复测试、配置测试、安全性测试、安装测试、兼容测试等等\n停止测试条件 # Testing is a trade-off between budget, time and quality.\n可靠性分析 # 可靠性：reliability of software 程序在给定的 时间间隔 内，按照规格说明书的规定，成功运行的概率。\n可用性：usability of software 程序在给定的 时间点，按照规格说明书的规定，成功运行的概率。\n公式： $$A_{use}=\\frac{T_{up}}{T_{up}+T_{down}}$$ $$A_{use}=\\frac{MTTF}{MTTF+MTTR}$$\nMTTF: 平均无故障时间 MTTR: 平均修复时间 MTTF 的计算\n符号表示\n符号 含义 ET total error before testing IT size of program to be tested τ time used by testing Ed(τ) found errors in [0, τ] Ec(τ) corrected errors in [0, τ] 两个基本假定\n$$ 0.005 \u0026lt;= ET / IT \u0026lt;= 0.02 $$ $$ MTTF \\propto 1 / \\text{hidden bugs} $$ 计算公式\n$$ \\text{MTTF} = \\frac{1}{K \\left( \\frac{E_T}{I_T} - \\frac{Ec(\\tau)}{I_T} \\right)} $$\n其中： ( K = 200 )\n$$ Ec = ET - \\frac{I_T}{K \\times MTTF} \\quad \\text{(stop rule)} $$\nPredicting total errors(ET)\n植入法：在程序中植入错误\n符号 含义 ( N_p ) number of errors planted ( n_p ) number of errors found within ( N_p ) ( n ) found new errors ( N ) total number of errors $$\\frac{N}{n}=\\frac{N_p}{n_p} =\u0026gt; \\frac{n_p}{N_p}=\\frac{n}{N}$$ $$N=N_p\\times\\frac{n}{n_p}$$\n分别测试法：区分标记故障和非标记故障\n符号 含义 ( N_1 ) found errors by person 1 （标记故障） ( N_2 ) found errors by person 2 （非标记故障，潜在故障） ( n_b ) found errors by both person1 and person 2 $$N=N_1 \\times N_2 / n_b$$\n调试 # 测试是识别错误的症状，调试是识别错误的原因。 Debugging\n软件调试是在进行了成功的测试之后才开始的工作. 调试的任务是进一步诊断和改正程序中潜在的错误 调试活动由两部分组成：性质原因和位置, 修改排除这个错误 调试工作是一个具有很强技巧性和经验性的工作 调试是通过现象，找出原因的一个思维分析的过程 通过 debuger 工具来进行 Most integrated development environments, such as JBuilder, include a debugger. 几种主要的调试方法\n强行排错法：内存打印、设置打印语句，跟踪程序执行过程 回溯法调试：小程序常用，人工沿着程序的控制流程回溯源代码，找出错误根源 归纳法调试：从一些线索(错误征兆)着手，通过分析它们之间的关系来找出错误。 演绎法调试：演绎法是一种从一般原理或前提出发，经过排除和精化的过程来推导出结论的思考方法。演绎法排错是测试人员首先根据已有的测试用例，设想及枚举出所有可能出错的原因做为假设；然后再用原始测试数据或新的测试，从中逐个排除不可能正确的假设；最后，再用测试数据验证余下的假设确是出错的原因。 Chapter 9 软件维护 # 软件的变化是不可避免的，关键是采取适当的策略，有效地实施和管理软件的变化！\n软件维护的概念 # 软件维护是软件开发工作完成以后，在用户使用期间，对软件所做的补充、修改和增加工作。 软件运行 ＝ 软件维护 在软件维护中，为 增加和改进软件的功能 所做的维护占 80%，而为改正错误所做的维护仅占 20%。 统计数据表明：实际上用于软件维护的费用占软件总费用的 55-80%。 软件维护比软件开发更困难，需要更多的创造性工作。 一般不涉及体系结构的重大变化 软件维护的类型 # 改正性维护：目的是识别和矫正功能 错误、性能 错误 和实现上的 错误。 Emergency Repairs Scheduled Repairs 适应性维护：使软件适应于 外界环境的改变 而对软件所做的修改工作。 完善性维护：为了 扩充软件的功能 或改善软件的性能对软件所做的改变。 预防性维护：为了 以后 更便于维护，或者为了改进可靠性，或者提供更好的基础便于将来提高性能而修改软件。可视为彻底的完美维护或维护的替代方案，Software Re-engineering 可维护性（Maintainability） # 软件可维护性是指软件被理解、改正、调整和改进的程度 提高可维护性可以通过进行明确的质量保证审查、改进程序的文档、提倡标准化、规范化开发\n再工程（Re-engineering） # Chapter 10 软件项目管理 # 项目是指为创建一个唯一的产品，或者提供唯一的服务而进行的努力活动。\n项目的特点： 目标性、周期性、约束性、不确定性\n软件项目的特点：\n对象：作为逻辑产品的软件 过程：不是以制造为主，无重复生产过程 属性：成本、进度、质量难以度量和估算 易变性：软件需求通常难以确定且经常变 复杂性：作为逻辑产品，复杂性非常高 软件项目管理的基本概念 # 软件项目管理是为了使软件项目能够按照预定的成本、进度、质量顺利完成，而对成本、人员、进度、质量、风险等进行分析和管理的活动。\n团队分工 # 相关概念 # 基线（BaseLine）是已经通过了正式复审的规格说明或中间产品，它可以作为进一步开发的基础，并且只有通过正式的变化控制过程才能改变。基线标志着软件开发过程的各个里程碑（Milestone）。 ISO 9000：质量保证体系, 用于实现质量管理的组织结构、责任、规程、过程和资源。 CMM 名称：Capability Maturity Model for Software 目的：Improving the Software Development Process THE END\n","date":"2024-12-21","externalUrl":null,"permalink":"/docs/softwareengineering/","section":"文档","summary":"\u003ch1 class=\"relative group\"\u003e2024 软件工程复习 \n    \u003cdiv id=\"2024-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#2024-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTongji University. 2024/12/21 \u003cbr\u003e\nHyoung Yan\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e本文框架 \n    \u003cdiv id=\"%E6%9C%AC%E6%96%87%E6%A1%86%E6%9E%B6\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%9C%AC%E6%96%87%E6%A1%86%E6%9E%B6\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"2024%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E6%A1%86%E6%9E%B6.png\" alt=\"本文框架\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"2024软件工程复习","type":"docs"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/%E5%A4%8D%E4%B9%A0/","section":"Tags","summary":"","title":"复习","type":"tags"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/","section":"Tags","summary":"","title":"软件工程","type":"tags"},{"content":" 学习 · 记录 · 分享 ","date":"2024-12-21","externalUrl":null,"permalink":"/docs/","section":"文档","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  学习 · 记录 · 分享\n\u003c/div\u003e\n\n\u003chr\u003e","title":"文档","type":"docs"},{"content":" 日常 · 记录 · 想法 ","date":"2024-12-21","externalUrl":null,"permalink":"/posts/","section":"帖子","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  日常 · 记录 · 想法\n\u003c/div\u003e\n\n\u003chr\u003e","title":"帖子","type":"posts"},{"content":" ONE # 二零二四年十二月四日，星期三，多云\n12月来了，2024年马上要结束了\nTWO # 读王老师书有感，摘抄一段：\n12 点，整个城市响起震耳欲聋的鞭炮声。在 10 楼观看，一番特殊心境。今年的鞭炮声比去年小，大概越来越文明了。广州、北京等地已经禁止放鞭炮，上海还没有坚决执行，只有宣传。\n看到一些高级礼花，小型的，大概很贵。也可以说明人们的生活水平在提高。我们放了一千响鞭炮，也不管文明不文明了。在这样的场合，人往往会有一种悲凉的感觉，越是热闹越是如此从中感受到自己生命的存在，感觉到世界是多么强大的外在力量，是可以不依人的感觉和情绪而存在的力量，是可以不依人的理性和理想而存在的力量。在平平淡淡的生活中，人们往往忘记了自己，觉得自己融入了社会和世界。但是，当世界沸腾起来时，才发现自己孤独安静的存在。\n在人生哲学上，王老师主张激进的入世主义和绝对理性，认为人应该单薄寡欲等等，他在书中写到：生活在这个世界上的人，有的是弱者，有的是强者；有的要别人来设定目标，有的给别人设定目标；有的需要感情支持生活，有的需要意志支持生活。我大概在每一对概念中都会选择做后一种人。\nTHREE # ","date":"2024-12-21","externalUrl":null,"permalink":"/posts/daily/2024-12-04/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE \n    \u003cdiv id=\"one\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv style = \"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年十二月四日，星期三，多云\u003c/p\u003e\n    \u003cp\u003e12月来了，2024年马上要结束了\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eTWO \n    \u003cdiv id=\"two\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#two\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e读王老师书有感，摘抄一段：\u003c/p\u003e","title":"2024 12 04","type":"posts"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/%E6%AD%A5%E5%B1%A5%E4%B8%8D%E5%81%9C/","section":"Tags","summary":"","title":"步履不停","type":"tags"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/%E6%97%A5%E5%B8%B8/","section":"Tags","summary":"","title":"日常","type":"tags"},{"content":"","date":"2024-12-21","externalUrl":null,"permalink":"/tags/%E5%A4%AA%E9%98%B3%E7%85%A7%E5%B8%B8%E5%8D%87%E8%B5%B7/","section":"Tags","summary":"","title":"太阳照常升起","type":"tags"},{"content":" ","date":"2024-11-22","externalUrl":null,"permalink":"/tabs/","section":"导航","summary":"\u003chr\u003e","title":"导航","type":"tabs"},{"content":" ONE # 二零二四年十一月七日，星期四，多云\n立冬了...天渐凉...\nTWO # 在上海第二次看到了星星，上一次在见到星星还是大一国庆去崇明岛玩。\n我以为星星消失了，因为我没有再见过星星\n想起一首歌，我想用它来记录冬天的到来。\n当你见天上星星，可有想起我。\nTHREE # 当你见到天上星星 可有想起我 可有记得当年我的脸 曾为你更比星星笑得多\n当你记起当年往事 你又会如何 可会轻轻凄然叹谓 怀念我在你心中 照耀过\n我像那银河星星 让你默默爱过 更让那柔柔光辉 为你解痛楚\n当你见到光明星星 请你想 想起我 当你见到星河灿烂 求你在心中记住我\n","date":"2024-11-09","externalUrl":null,"permalink":"/posts/daily/2024-11-07/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE \n    \u003cdiv id=\"one\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年十一月七日，星期四，多云\u003c/p\u003e\n    \u003cp\u003e立冬了...天渐凉...\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eTWO \n    \u003cdiv id=\"two\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#two\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e在上海第二次看到了星星，上一次在见到星星还是大一国庆去崇明岛玩。\u003c/p\u003e","title":"2024 11 07","type":"posts"},{"content":" 前言 # 一如济网\n同济大学无线网络提供三种接入服务(SSID):TJ-WIFI、TJ-GUEST-WIFI、eduroam\nTJ-WIFI 面向所有已开通统一身份认证或上网服务的在校师生及其他用户（tj 开头账户），采用 802.1x 接入方式，用户只需在首次登录时使用用户名及密码完成验证，再次连接时系统将会自动完成身份认证，无需重复输入； TJ-GUEST-WIFI 主要面向校外访客，采用 web 认证方式，通过手机验证码认证登录； eduroam 主要面向所有加入 eduroam 联盟（全球教育和学术领域无线漫游服务联盟）的其他高校师生或科研机构人员，采用 802.1x 接入方式，我校师生在其他提供该无线服务（SSID）的区域也可以使用该服务。 除此之外，在宿舍区域还有一种，TJ-DORM-WIFI，支持免费使用以及绑定宽带，但是如果长时间不使用，设备会被注销，基本一两天就要登录一次，较为麻烦，这也是写这个脚本的原因，主要针对 Windows 端。\n思路 # 脚本较为简单，其实核心就是一个 GET 请求，在此基础上进行了一些逻辑判断。\n分析验证方式 # 打开 TJ-DORM-WIFI 的登录页面 页面较为简单，只需要输入账号密码即可登录，此外如果绑定了宽带账号，可以选择【中国移动】、【中国联通】等，这里默认校园网账号登录。 检查请求方式 在登录页按 F12 打开开发者工具，切换到 NetWork 选项卡，勾选保留日志，然后输入学号密码登录，查看请求方式，可以看到是 GET 请求方式。 分析请求参数 点击第一个资源文件，查看Header表头参数，查看 URL 格式，发现请求的 URL 中带有学号密码明文，到这步也就知道了校园网自动认证的原理，甚至学号密码都没有加密，我们可以构造一个 GET 请求，传递此 URL 参数即可完成登录。 验证登录 复制请求 URL，注销校园网登录，然后在地址栏粘贴请求 URL，发现返回一些信息，同时校园网登录成功。也就是说最关键的就是构造这个 URL 请求。 参数分析 # LOGIN_IP\n描述：登录页面的基础 URL\n示例：\u0026quot;http://172.21.0.54/\u0026quot;\nNOT_SIGNED_IN_TITLE\n描述：用户未登录时页面的标题\n示例：\u0026quot;上网登录页\u0026quot;\nRESULT_RETURN\n描述：登录请求返回的成功标识\n示例：'\u0026quot;result\u0026quot;:1'\nTIMEOUT\n描述：请求的超时时间（秒） RETRY_DELAY\n描述：请求失败后的重试等待时间（秒） MAX_RETRIES\n描述：最大重试次数 USERNAME\n描述：用户的学号\n示例：\u0026quot;2253666\u0026quot;\nPASSWORD\n描述：用户的密码 SIGN_PARAMETER\n描述：登录请求的完整 URL，包含用户名和密码 示例：f\u0026quot;http://172.21.0.54/drcom/login?callback=dr1003\u0026amp;DDDDD={USERNAME}\u0026amp;upass={PASSWORD}\u0026amp;0MKKey=123456\u0026amp;...\u0026quot; SIGNED_IN_TITLES\n描述：登录成功后可能出现的页面标题 示例：[\u0026quot;登录成功页\u0026quot;, \u0026quot;注销页\u0026quot;] 配置 # 思路：编写脚本通过 GET 方法请求登录页面，传递学号密码参数，完成登录。为了实现自动登录，可以使用任务计划程序实现，也可以借助油猴插件，每次访问网页时自动检测并登录。\n01 油猴脚本 # 使用大名鼎鼎的油猴扩展插件，编写简单的脚本程序，每次打开浏览器访问网页时检测是否可以访问互联网，如果不能访问，则使用 GET 方法请求登录页面，传递学号密码参数，完成登录，并刷新页面。 02 Python 脚本 # 使用 Python 编写脚本，通过 GET 方法请求登录页面，传递学号密码参数，完成登录，然后使用任务计划程序定时执行脚本，实现自动登录。\n但是貌似这种方法有点麻烦，因为 Python 需要导入一些第三方包，不如第一种简单。\n第一种属于浏览器脚本，不能操作系统设置，借助 Python 及其强大的第三方包，可以使脚本更灵活，比方 version2 相比之前添加了切换 WIFI 的功能，自动切换到 TJ-DORM-WIFI，并且添加了系统通知、错误重连等功能，但是十分简陋，还好勉强可用。\n需要导入的库有：\npip install requests pip install win11toast pip install asyncio\n修改相关参数 login_IP 改为学校校园网登录的 IP 地址，并添加 http not_sign_in_title 改为校园网未登录状态的页面标题 result_return 改为登录成功页面中的标识（上面响应串中的\u0026quot;result\u0026quot;:1）\nsign_parameter 改为电脑端的请求 URL signed_in_title 改为校园网已登录状态的页面标题 添加任务计划，每次开机自动执行脚本，实现自动登录\n搜索并打开任务计划程序，创建任务 修改权限和配置 添加触发器 添加条件 添加操作 因为 Python 脚本需要解释器，需要配环境，太麻烦，所以把 Python 脚本转成了 exe 可执行文件，这样更方便一些。 03 批处理命令 # 也可以使用批处理命令，其实方法很多，核心部分就是通过 GET 方法请求登录 URL，而且不涉及任何加解密、验证码验证。\n@echo off REM 使用curl执行GET请求访问校园网登录URL set USERNAME=你的学号 set PASSWORD=你的密码 set LOGIN_URL=http://172.21.0.54/drcom/login?callback=dr1003^\u0026amp;DDDDD=%USERNAME%^\u0026amp;upass=%PASSWORD%^\u0026amp;0MKKey=123456^\u0026amp;R1=0^\u0026amp;R2=^\u0026amp;R3=0^\u0026amp;R6=0^\u0026amp;para=00^\u0026amp;v6ip=^\u0026amp;terminal_type=1^\u0026amp;lang=zh-cn^\u0026amp;jsVersion=4.1^\u0026amp;v=2952^\u0026amp;lang=zh curl -X GET \u0026#34;%LOGIN_URL%\u0026#34; exit 代码部分 # 较为简单，可以自行修改\nyzlevol/TJ-DORM-WIFI-AUTO-LOGIN TJ-DORM-WIFI自动连接 Python 3 0 参考 # 理论上各大高校都适用的全平台校园网自动登录实现方法 ","date":"2024-10-30","externalUrl":null,"permalink":"/docs/tj-dorm-wifi-auto-login/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e前言 \n    \u003cdiv id=\"%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一如济网\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e同济大学无线网络提供三种接入服务(SSID):\u003ccode\u003eTJ-WIFI\u003c/code\u003e、\u003ccode\u003eTJ-GUEST-WIFI\u003c/code\u003e、\u003ccode\u003eeduroam\u003c/code\u003e\u003c/p\u003e","title":"Tongji-DORM-WIFI自动登录","type":"docs"},{"content":"","date":"2024-10-30","externalUrl":null,"permalink":"/tags/%E5%B7%A5%E5%85%B7/","section":"Tags","summary":"","title":"工具","type":"tags"},{"content":"","date":"2024-10-30","externalUrl":null,"permalink":"/tags/%E5%90%8C%E6%B5%8E/","section":"Tags","summary":"","title":"同济","type":"tags"},{"content":"","date":"2024-10-30","externalUrl":null,"permalink":"/tags/%E7%BD%91%E7%BB%9C/","section":"Tags","summary":"","title":"网络","type":"tags"},{"content":" 介绍 # Follow,下一代的聚合信息浏览器\nFollow 为用户提供了一个全新的信息聚合平台，但远不止于此。\n什么是 RSS？ # RSS（Really Simple Syndication） 简单来说就是把信息源聚合在一起，在一个地方接受所有信息源的更新信息、摘要甚至全文，对于多信息源的场景非常必要。\nRSS 定义了非常简单的方法来共享和查看标题和内容，它基于 XML 格式编写，可以自动更新，允许为不同的网站进行视图的个性化。\n为什么选择 RSS？ # RSS 最吸引人之处，在于它能让你看到「开放互联网未经过滤的样子」，给你一个「自己决定看什么」的机会。\n在这个信息爆炸的时代，如何及时、快速获取信息？如何避免被信息淹没？以个人为例，我常用的平台有微信公众号、知乎、B 站等。除此之外，也会关注一些独立博客、新闻网站等。但是当我们关注的信息源超过个位数，就不再可能通过偶尔打开来获取信息更新了，费时费力，而且下载各种各样的 APP 实在让人心烦。这时候，你倒可以去尝试一下 RSS，相信你会被它的简洁、高效的聚合特性所吸引。\n为什么选择 Follow？ # 当然，如果你用过 RSS，你会发现，大多数 RSS 阅读器信息源较少，虽然有 RSSHub 等工具，但是对于普通用户来说，使用门槛较高，你需要自己去添加订阅源，有的费了千辛万苦找到了却因为没人维护不再可用。 而 Follow 则是一个专注于信息聚合的平台，它提供了更多的信息源，更多的分类，更多的个性化设置，更多的社交功能，更多的阅读体验。简单来说就是，Follow 为你提供了一个快速上手，界面美观的 RSS 工具，不管你是第一次听说 RSS 还是 RSS 重度用户，Follow 都能满足你的需求，All in One。 功能特性 # 嘿，不要问那么多为什么了，快下载下来试试。\n功能特性：\n多元化的内容聚合 Follow 的核心优势在于其强大的内容聚合能力，用户可以在会这个统一的平台上关注并管理来自各种来源的信息，包括但不限于： 网站和博客\n社交媒体账号\n博客节目\n各类通知和更新\n这种集中化的管理方式大大简化了用户的信息获取流程，让他们能够更加高效地掌握感兴趣的内容动态。 在公测这段时间，Follow 已经收录了许多优质的信息源，包括知乎、微博、B 站、YouTube、Medium、微信公众号等，后续估计也会覆盖越来越多的信息源，可以节省用户许多时间。 颜值即是正义 Follow 的设计风格简洁大方，界面美观，操作简单，支持多种功能自定义。目前有 Windows、Mac、Linux 和 Web 端，满足了不同用户的需求，后续可能推出 Android 和 iOS 版本。\nFollow 为不同类型的内容静心设计了独特的展示方式，文章、社交媒体帖子、图片、视频、播客等都有专属的视图，力求为用户提供媲美甚至超越原平台的浏览体验。 人工智能赋能 现在啥软件都整 AI+，Follow 也如此，提供了 AI 翻译、AI 智能摘要、AI 推荐等功能，让你的阅读体验更加智能化。 区块链激励机制 Follow 创新性地引入了区块链技术，通过 Power Token 构建了一个独特的生态系统：\n活跃用户可以获得 Token 奖励，享受更多高级服务。\n优质内容创作者能够获得直接的经济回报，激励持续创作。\n形成了一个良性循环的生态系统，促进高质量内容的产出和传播。\n这学期报了区块链技术课，但是没怎么认真听，不甚了解。\n亲自试试 # 由于 Follow 正处于公测阶段，免费用户仅可导入 5 个信息源，某些功能需要邀请码才可体验。所以可以先导入几个体验一下，邀请码可以到闲鱼买，一瓶饮料钱。\nGithub：https://github.com/RSSNext/Follow\n官网：https://follow.is/\n","date":"2024-10-26","externalUrl":null,"permalink":"/docs/follow_the_rss_reader/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e介绍 \n    \u003cdiv id=\"%E4%BB%8B%E7%BB%8D\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BB%8B%E7%BB%8D\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFollow,下一代的聚合信息浏览器\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFollow 为用户提供了一个全新的信息聚合平台，但远不止于此。\u003c/p\u003e","title":"Follow,下一代的聚合信息浏览器","type":"docs"},{"content":"","date":"2024-10-26","externalUrl":null,"permalink":"/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/","section":"Tags","summary":"","title":"软件推荐","type":"tags"},{"content":"","date":"2024-10-26","externalUrl":null,"permalink":"/tags/%E9%98%85%E8%AF%BB/","section":"Tags","summary":"","title":"阅读","type":"tags"},{"content":" ONE 阅读记录 # 变形记是卡夫卡的代表作之一，本作很短，后半部分是作者的小传。读卡夫卡的《变形记》有一种被撕裂、吞噬的感觉，作者的笔触十分悲凉，让人看到人物自我救赎却又陷入毁灭的无望追寻。\n卡夫卡小说的一大主题：对困境的顺从。卡夫卡认为困境是人生的常态，观察困境中人的生活，人于其中克服困境的，是浪漫主义或英雄史诗；而人被困境裹挟，乃是人生常态。关注常态下人的境遇，是现代小说的标志。\n一九一五年该作首度问世时，卡夫卡曾在一封信中特别声明，这只怪虫的形象不能予以具象化。的确，有人认为这只怪虫是众多苦难的象征，个人认为，人人心中都有那么个怪虫，不尽相同，不予之具象化，也许更能引人深思，同心中的怪虫沟通。\nTWO 内容回顾 # 此书开篇讲述了格里高尔一觉醒来变成了一只甲虫，异形的他再也无法融入原来的生活、工作中去。然而不管格里高尔是变成甲虫前还是变成甲虫后，都是那么努力地活着，担心家人的生活。格里高尔饱受变身后的煎熬，但他从未考虑过自己的感受，有点像讨好型人格，所有的付出和努力在家人眼中已经习以为常，因此当他失去了人的价值，家人也逐渐开始嫌弃他的存在。最终格里高尔在冷漠中死去。\nTHREE 三五七言 # 一本书必须是一柄斧头，凿开我们心中冰封的海洋。\n噢，这世上是有希望，无穷的希望。只是你我没有。\n","date":"2024-10-26","externalUrl":null,"permalink":"/posts/books/04_%E5%8F%98%E5%BD%A2%E8%AE%B0/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE 阅读记录 \n    \u003cdiv id=\"one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e    变形记是卡夫卡的代表作之一，本作很短，后半部分是作者的小传。读卡夫卡的《变形记》有一种被撕裂、吞噬的感觉，作者的笔触十分悲凉，让人看到人物自我救赎却又陷入毁灭的无望追寻。\u003c/p\u003e","title":"【书评】变形记","type":"posts"},{"content":"","date":"2024-10-26","externalUrl":null,"permalink":"/tags/%E4%B9%A6%E8%AF%84/","section":"Tags","summary":"","title":"书评","type":"tags"},{"content":" ONE 阅读记录 # 三月，天空中纷洒着似雨似雪\n情绪反扑，唯有读书可以让我静下心来，这两天也真是疯魔了，一天一本。\n花了两个小时读了王蒙的《组织部来了个年轻人》，乍一听书名想到了小王 hhh，能文能武，长相十分英俊。\n本书写于 1956 年，恰值“双百方针”实行时期，毛主席曾 5 次评论这本小说，认为是一本反对官僚主义的小说，此书在当时引起不小的反响，众人就“北京是否有官僚主义”等问题展开争论。\n次年王蒙被划为右派，在新疆生活了十六年之久，然而所谓“祸兮福之所倚，福兮祸之所伏”，作者也因此躲过了十年浩劫，并于 1979 年得以平反，此后还出任了文化部部长等职务，看别人的人生总是很有趣，短短几句话，有多少故事在其中。 TWO 内容回顾 # 小说以处理麻袋厂党支部官僚主义问题作为中心情节展开叙述，讲述了新进组织部的年轻人林震与官僚主义者的斗争。人物是复杂的，立体的，一腔热血的主人公林震心性纯良，不愿同流合污但在工作中却缺乏经验；刘世吾思维敏捷，老道成熟但随波逐流；薛常新圆滑变通但能力极强，混的风生水起。小说虽然写于 1956 年，但是近七十年过后，又一个年轻人看后，觉得里面的场景仿佛就发生在当今。\n本文篇幅不长，后文一多半都是作者的补充和他人评价。暂且不论教员的评价是否出于政治因素，也不论某些政策是否是“引蛇出洞”，也不论本文是否确有“影射之意”。不妨把目光放远，书中的某些问题似乎是永恒的，如同心脏里的灰尘，金子中的杂质，我还是暂时认为水至清则无鱼，合金比足金更易留存，可无论如何，对于纯金的追求应该始终不变。\nTHREE 三五七言 # 一 理想主义的课堂教着白 现实主义的课堂说着黑 而我，从明天起 做一个灰色的人，在灰色地带游走着\n二 现在二十二岁，他的生命史上好像还是白纸，没有功勋，没有创造，没有冒险，也没有爱情——连给某个姑娘写一封信都没做过。\n三 年轻人都这样，最初互相美化，慢慢发现了缺点，就觉得都很平凡。\nFOUR 致自己 # 你是选择做林震还是刘世吾？在回答之前，不妨告诉 20 岁的自己，在白纸般的人生上多一些尝试，多一些勇敢。\n","date":"2024-10-19","externalUrl":null,"permalink":"/posts/books/03_%E7%BB%84%E7%BB%87%E9%83%A8%E6%9D%A5%E4%BA%86%E4%B8%AA%E5%B9%B4%E8%BD%BB%E4%BA%BA/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE 阅读记录 \n    \u003cdiv id=\"one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e三月，天空中纷洒着似雨似雪\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e情绪反扑，唯有读书可以让我静下心来，这两天也真是疯魔了，一天一本。\u003c/p\u003e","title":"【书评】组织部来了个年轻人","type":"posts"},{"content":" ONE 阅读记录 # 如果你抑郁，是因为你活在过去；\n如果你焦虑，是因为你活在未来；\n如果你内心平静，说明你活在当下。\n用时五天读完了这本书《蛤蟆先生去看心理医生》，曾经听书名以为是童书，其实是一本很有趣且有深度的心理疗愈读物。\n曾经以为这种心理/哲学相关的书会很枯燥，读不下去，其实还是因为没有用心去读去尝试。在读书的过程中，收获了很多有趣的知识，比方人生的三大状态：儿童自我状态、父母自我状态、成人自我状态，成年人的行为习惯都是从童年学来的，也会潜移默化地影响人的一生，原谅过去实际也是学会自洽。\nTWO 内容回顾 # 蛤蟆先生是一只不吃天鹅肉的好蛤蟆，在别人眼中他温文尔雅，风度翩翩，虽然也时而出丑，做些傻事，可是生活自由且快乐。俗话说“世上的事情，件件藏着委屈。”蛤蟆先生最近就因为一些变故，变得越来越抑郁，仿佛坠入了深渊，成了井底之蛙。在朋友的帮助下，蛤蟆先生找到了心理咨询师苍鹭，在苍鹭的引领下开始探索自己的内心世界，不断地认识自己、接纳自己、改变自己，最终开始蜕变。 不同于童话结尾，蛤蟆先生并未变成青蛙王子，而是变成了一个活在当下，追求未来的“成人自我”。本书以 10 次心理访谈开始，以蛤蟆先生和朋友各奔前程作结，完成了一次自我的疗愈。\nTHREE 三五七言 # 没有一种批判比自我批判更强烈，也没有一个法官比我们自己更苛刻。\n部分摘自微信读书[西小北]的书评，写的很好： 本书重点可概括为“1+2+3+4”：\n1 个前提。改变的唯一前提是认识你自己，在这个世界上能帮你的人只有你自己。\n2 个思维。人人在理性与感性之间徘徊，真正厉害的人，是理性与感性并存。之前的我，更像是感性大于理性，置身事外还可保持冷静，但是深陷其中，亲身体会，才会明白在感性中保持理性如何之难。\n3 个状态。每个人都有儿童、父母及成人的自我状态，三位一体，成年人之所以痛苦，恰恰是因为不在成人状态。而每个人都有这三种状态，不必怀疑处在儿童自我状态的你是否有父母状态，想想是否有时候自己会因为某件小事苛责自省。\n4 个坐标。人生有四个坐标，你选择的坐标决定了你成为什么样的人，“我好，你也好”是个动态的过程，选择它使我们奋斗的终极目标。 FOUR 致自己 # 你看向哪里？\n你要看向自己。\n做只快乐的蛤蟆先生吧，不要被自己困住，学会自洽，学会自省而不是自我批判。\n继续做只善良的蛤蟆吧，原谅过去，活在当下。\n","date":"2024-10-17","externalUrl":null,"permalink":"/posts/books/01_%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE 阅读记录 \n    \u003cdiv id=\"one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one-%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果你抑郁，是因为你活在过去；\u003cbr\u003e\n如果你焦虑，是因为你活在未来；\u003cbr\u003e\n如果你内心平静，说明你活在当下。\u003c/p\u003e","title":"【书评】蛤蟆先生去看心理医生","type":"posts"},{"content":" 1\n夏天的隅落里，我想起远方的不幸\n作为背景的光幕突然被影子犁开\n上楼的声音渐渐远了\n2\n当窗外的风推开街道，当我\n复述着意义消散的故事\n谁也不知道时辰如此之新\n像是猫的线条\n3\n偶尔，空无一字的纸要我解释它\n我说好吧，我把词从你体内\n驱赶出来，用日常的训诫\n和窥视者无垠的耐心\n4\n一首诗因而独自在阳光下发烫\n它没有燃烧，也没有暴漏自己的\n清逸，它只是和我一样抛锚在\n一个不那么痛苦的时刻\n","date":"2024-10-16","externalUrl":null,"permalink":"/posts/daily/2024-10-16/","section":"帖子","summary":"\u003cblockquote\u003e\n\u003cp\u003e1\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e夏天的隅落里，我想起远方的不幸\u003c/p\u003e\n\u003cp\u003e作为背景的光幕突然被影子犁开\u003c/p\u003e\n\u003cp\u003e上楼的声音渐渐远了\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e2\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e当窗外的风推开街道，当我\u003c/p\u003e\n\u003cp\u003e复述着意义消散的故事\u003c/p\u003e\n\u003cp\u003e谁也不知道时辰如此之新\u003c/p\u003e\n\u003cp\u003e像是猫的线条\u003c/p\u003e","title":"2024 10 16","type":"posts"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/%E4%B8%89%E4%BA%94%E4%B8%83%E8%A8%80/","section":"Tags","summary":"","title":"三五七言","type":"tags"},{"content":" ONE # 二零二四年十月十三日，星期日，多云转阴\nTWO # Love Is Over\n这首歌有很多版本，但还是觉得这一首最好听，我们要快快乐乐的，我们不应该停留在回忆，停留在过去，而是应该多看看远方，多看看未来，多看看自己。\nLove is over，但是，这几天的太阳还是照常升起不是吗？ 昨天傍晚时分，在校园里溜达，原来学校这么美，这么安静可爱。\nTHREE # FOUR # ","date":"2024-10-13","externalUrl":null,"permalink":"/posts/daily/2024-10-13/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE \n    \u003cdiv id=\"one\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年十月十三日，星期日，多云转阴\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eTWO \n    \u003cdiv id=\"two\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#two\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ctext\u003eLove Is Over\u003c/text\u003e\u003c/p\u003e","title":"2024 10 13","type":"posts"},{"content":"","date":"2024-10-08","externalUrl":null,"permalink":"/tags/fixbugs/","section":"Tags","summary":"","title":"Fixbugs","type":"tags"},{"content":" 问题描述 # 本着尝鲜的目的，更新了 Windows 11 24H2 版本，24H2 版本添加了些新功能，比方sudo命令，但是出乎意料又合理之中的是遇到了一些小问题，比方当鼠标聚焦在文本输入框时，光标会消失，鼠标正常移动。 猜测应该是图标显示的问题，果然网上检索，发现问题根源在于更新后的系统改变了鼠标指针的默认设置，引发了某些应用程序的兼容性问题。 针对这一问题，微软方面建议用户手动将鼠标指针恢复默认状态。 解决方案 # 开始面板搜索鼠标，打开鼠标设置。 在指针选项中，将指针选项卡中的指针下拉菜单选择为Windows 默认。 在自定义区域中，选中文本选择，点击浏览，选中beam_r.cur，点击打开。 保存退出，即可解决问题。 ","date":"2024-10-08","externalUrl":null,"permalink":"/docs/fixbugs/24h2_where_is_my_cusor/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e问题描述 \n    \u003cdiv id=\"%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e本着尝鲜的目的，更新了 Windows 11 24H2 版本，24H2 版本添加了些新功能，比方\u003ccode\u003esudo\u003c/code\u003e命令，但是出乎意料又合理之中的是遇到了一些小问题，比方当鼠标聚焦在文本输入框时，光标会消失，鼠标正常移动。\n猜测应该是图标显示的问题，果然网上检索，发现问题根源在于更新后的系统改变了鼠标指针的默认设置，引发了某些应用程序的兼容性问题。\n针对这一问题，微软方面建议用户手动将鼠标指针恢复默认状态。\n\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"image.png\" alt=\"alt text\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"我请问24H2，我的光标在哪里？","type":"docs"},{"content":" 问题描述 # 运行 jar 包时出错：在命令行中可以运行 jar，但是双击 jar 文件无反应或者闪退 cmd 命令\n解决方案 # 首先确定 Java 运行环境已经安装好，包括 JDK 或 JRE。可在命令行输入java -version查看是否安装成功。 如果在命令行中输入java -jar xx.jar可以运行，则说明是打开方式设置的问题。可右键 jar 文件，选择“打开方式”，选择“Java(TM) Platform SE binary”或浏览找到javaw.exe。 如果双击仍然无反应或闪退，则可 Win+R，键入regedit代开注册表编辑器，找到HKEY_CLASSES_ROOT\\Applications\\javaw.exe\\shell\\open\\command，检查值是否少了-jar参数（注意无引号）,修改后应为\u0026quot;C:\\Program Files\\Java\\jre1.8.0_281\\bin\\javaw.exe\u0026quot; -jar \u0026quot;%1\u0026quot;，保存退出即可解决问题。 ","date":"2024-10-08","externalUrl":null,"permalink":"/docs/fixbugs/run_the_jar/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e问题描述 \n    \u003cdiv id=\"%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e运行 jar 包时出错：在命令行中可以运行 jar，但是双击 jar 文件无反应或者闪退\ncmd 命令\u003c/p\u003e","title":"命令行可执行jar包，但是无法双击运行","type":"docs"},{"content":" ONE # 二零二四年十月三日，星期四\n记二零二四年国庆\n微风不燥，阳光甚好\nShanghai 🚲 Kunshan\nTWO # A part of THREE # ","date":"2024-10-03","externalUrl":null,"permalink":"/posts/daily/2024-10-3/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE \n    \u003cdiv id=\"one\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年十月三日，星期四\u003c/p\u003e\n    \u003cp\u003e记二零二四年国庆\u003c/p\u003e\n    \u003cp\u003e微风不燥，阳光甚好\u003c/p\u003e\n    \u003cp\u003eShanghai 🚲 Kunshan\u003c/p\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eTWO \n    \u003cdiv id=\"two\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#two\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eA part of\n\n\n\u003cdiv id=\"gallery-7f1eebe14c601cd3ae9ed66895580d64\" class=\"gallery\"\u003e\n  \n\u003cimg src=\"pics/pic9.jpg\" class=\"grid-w22\" /\u003e\n\u003cimg src=\"pics/pic1.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic4.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic5.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic3.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic6.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic7.jpg\" class=\"grid-w33\" /\u003e\n\u003cimg src=\"pics/pic8.jpg\" class=\"grid-w33\" /\u003e\n\n\u003c/div\u003e\u003c/p\u003e","title":"2024 10 3","type":"posts"},{"content":" 介绍 # 《Hello 算法》：动画图解、一键运行的数据结构与算法教程 支持 Python, Java, C++, C, C#, JS, Go, Swift, Rust, Ruby, Kotlin, TS, Dart 代码 适合初学者，从零开始学习数据结构与算法 免费电子书，界面美观 访问 # Github 仓库 Hello 算法 在线阅读地址 ","date":"2024-09-28","externalUrl":null,"permalink":"/docs/hello_algo/","section":"文档","summary":"\u003ch3 class=\"relative group\"\u003e介绍 \n    \u003cdiv id=\"%E4%BB%8B%E7%BB%8D\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BB%8B%E7%BB%8D\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e《Hello 算法》：动画图解、一键运行的数据结构与算法教程\u003c/li\u003e\n\u003cli\u003e支持 Python, Java, C++, C, C#, JS, Go, Swift, Rust, Ruby, Kotlin, TS, Dart 代码\u003c/li\u003e\n\u003cli\u003e适合初学者，从零开始学习数据结构与算法\u003c/li\u003e\n\u003cli\u003e免费电子书，界面美观\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /docs/hello_algo/demo_hu14182871113745596788.gif 330w,\n        /docs/hello_algo/demo_hu3589642108854225774.gif 660w,\n        /docs/hello_algo/demo_hu2382235370839721109.gif 1024w,\n        /docs/hello_algo/demo_hu1664597185007674672.gif 2x\"\n        src=\"/docs/hello_algo/demo_hu3589642108854225774.gif\"\n        alt=\"动画图解\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"Hello 算法, 带有动画图解的数据结构与算法教程","type":"docs"},{"content":"","date":"2024-09-28","externalUrl":null,"permalink":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","section":"Tags","summary":"","title":"数据结构","type":"tags"},{"content":"","date":"2024-09-28","externalUrl":null,"permalink":"/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法","type":"tags"},{"content":"","date":"2024-09-28","externalUrl":null,"permalink":"/tags/%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"学习","type":"tags"},{"content":" 介绍 # 这是一款全平台通用的换源工具/框架，目标支持 Linux, Windows (MSYS2, Cygwin), macOS, BSD 等尽可能多的操作系统环境，龙芯、飞腾、RISC-V 等尽可能多的 CPU。\n特性 # chsrc 不仅是一个命令行工具，同时也是一个换源框架，它甚至使你能够在不了解 C 语言的情况下编写出新的换源方法。\n立刻为一个新软件添加换源方法！添加自定义源\n安装 # Windows 通过 scoop 安装：$ scoop install chsrc\n手动下载：\ncurl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-windows.exe -o chsrc.exe\nLinux\ncurl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc; chmod +x ./chsrc\nmacOS\nbrew install chsrc\n","date":"2024-09-28","externalUrl":null,"permalink":"/docs/change-the-source/","section":"文档","summary":"\u003ch3 class=\"relative group\"\u003e介绍 \n    \u003cdiv id=\"%E4%BB%8B%E7%BB%8D\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BB%8B%E7%BB%8D\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e这是一款全平台通用的换源工具/框架，目标支持 Linux, Windows (MSYS2, Cygwin), macOS, BSD 等尽可能多的操作系统环境，龙芯、飞腾、RISC-V 等尽可能多的 CPU。\u003c/p\u003e","title":"全平台命令行换源工具 chsrc","type":"docs"},{"content":" ONE # 二零二四年八月廿六日，星期六，晴\nTWO # 追-张国荣 Good Night ","date":"2024-09-28","externalUrl":null,"permalink":"/posts/daily/2024-9-28/","section":"帖子","summary":"\u003ch2 class=\"relative group\"\u003eONE \n    \u003cdiv id=\"one\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#one\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年八月廿六日，星期六，晴\u003c/p\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eTWO \n    \u003cdiv id=\"two\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#two\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003ccenter\u003e\n\u003ctext\u003e追-张国荣\u003c/text\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HcSE3cQH-Ic?si=Z0zeizBbsqmpJ8u7\u0026amp;controls=0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003c/center\u003e\n\u003chr\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n    \u003ch2\u003eGood Night\u003c/h2\u003e\n\u003c/div\u003e","title":"2024 09 28","type":"posts"},{"content":" 二零二四年八月廿五日，星期五，晴\n闲来无事，基于 Github+Hugo+Blowfish 搭建了个人博客\n希望在这里记录一些生活、学习点滴\n这个世界还是会好起来的\n","date":"2024-09-27","externalUrl":null,"permalink":"/posts/daily/2024-9-27/","section":"帖子","summary":"\u003cdiv style=\"text-align: center;\"\u003e\n    \u003cp\u003e二零二四年八月廿五日，星期五，晴\u003c/p\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\u003cp\u003e闲来无事，基于 Github+Hugo+Blowfish 搭建了个人博客\u003c/p\u003e\n\u003cp\u003e希望在这里记录一些生活、学习点滴\u003c/p\u003e\n\u003cp\u003e这个世界还是会好起来的\u003c/p\u003e","title":"2024 09 27","type":"posts"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/tags/%E7%A4%BA%E4%BE%8B/","section":"Tags","summary":"","title":"示例","type":"tags"},{"content":" Hi! I am a junior student at Tongji University \\\\ majoring in Computer Science. ","date":"2020-08-14","externalUrl":null,"permalink":"/users/","section":"用户列表","summary":"\u003ccenter\u003e\nHi! I am a junior student at Tongji University \\\\\nmajoring in Computer Science.\n\u003c/center\u003e","title":"用户列表","type":"users"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/tags/%E5%8F%8B%E9%93%BE/","section":"Tags","summary":"","title":"友链","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"I am a junior undergraduate student majoring in Computer Science and Technology at Tongji University.\n","externalUrl":null,"permalink":"/authors/hyoungyan/","section":"作者列表示例","summary":"\u003cp\u003eI am a junior undergraduate student majoring in Computer Science and Technology at Tongji University.\u003c/p\u003e","title":"Hyoung Yan","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。:rocket:\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","externalUrl":null,"permalink":"/tags/advanced/","section":"Tags","summary":"\u003cp\u003e这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。:rocket:\u003c/p\u003e\n\u003cp\u003e你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\u003c/p\u003e","title":"高级","type":"tags"},{"content":"在你的文章中添加不同作者的简单示例。\n","externalUrl":null,"permalink":"/authors/","section":"作者列表示例","summary":"\u003cp\u003e在你的文章中添加不同作者的简单示例。\u003c/p\u003e","title":"作者列表示例","type":"authors"}]